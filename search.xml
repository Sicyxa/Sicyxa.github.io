<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vue3中Pinia的基本使用</title>
    <url>/2024/11/19/Vue3%E4%B8%AD%E4%BD%BF%E7%94%A8Pinia%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<hr>
<h3 id="Pinia-介绍"><a href="#Pinia-介绍" class="headerlink" title="Pinia 介绍"></a><a class="link"   href="https://pinia.web3doc.top/" >Pinia</a> 介绍</h3><p>Pinia是一个专门为Vue.js设计的状态管理库，它提供了一种简单和直观的方式来管理应用程序的状态。在使用Pinia时，可以轻松地创建定义状态的存储，然后将其与Vue组件绑定，使它们能够使用该状态。和Vuex相比，Pinia 更加简单易用，体积更小，同时具有更好的 TypeScript 支持和插件系统。</p>
<h3 id="安装和配置Pinia"><a href="#安装和配置Pinia" class="headerlink" title="安装和配置Pinia"></a>安装和配置Pinia</h3><p>安装和配置Pinia非常简单，像其他Vue插件一样，Pinia需要通过yarn或npm进行安装并且与Vue应用程序进行绑定，可以使用以下命令进行安装：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add pinia</span><br><span class="line">或者</span><br><span class="line">npm install pinia</span><br></pre></td></tr></table></figure></div>

<p>在安装完Pinia包之后，需要在main.js文件中导入createPinia函数并将Pinia插件与Vue应用程序绑定，如下所示：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;            </span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();  <span class="comment">// 创建Pinia实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);   <span class="comment">// 创建根实例</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(pinia);      <span class="comment">// pinia插件的安装配置</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);   <span class="comment">// 视图的挂载</span></span><br></pre></td></tr></table></figure></div>

<p>使用 createPinia() 函数创建并初始化Pinia插件实例，将其与Vue应用程序绑定使用app.use(pinia)。至此，我们就可以使用Pinia来管理Vue应用程序的状态了。</p>
<h3 id="语法糖写法-setup"><a href="#语法糖写法-setup" class="headerlink" title="语法糖写法-setup"></a>语法糖写法-setup</h3><ul>
<li>定义一个store</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, &#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//数据（state）</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改数据的方法（action）</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">increament</span>=(<span class="params"></span>)=&gt;&#123;count.<span class="property">value</span>++&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getters写法</span></span><br><span class="line"><span class="keyword">const</span> doubleCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//记得要retuen</span></span><br><span class="line"><span class="keyword">return</span>&#123;</span><br><span class="line">    count,</span><br><span class="line">    increament,</span><br><span class="line">    doubleCount</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<ul>
<li>在Vue组件中使用</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;!-- 这里使用store里的state --&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123;  store.count &#125;&#125;&lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 这里直接使用store里的getters --&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; store.doubleCount() &#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 这里使用store里的actions --&gt;</span><br><span class="line">  &lt;div @click=&quot;store.increament()&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    </span><br><span class="line">  import &#123;useCounterStore&#125; from &quot;../../store/counter.js&quot;;</span><br><span class="line">  const store = useCounterStore()</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="storeToRefs工具函数"><a href="#storeToRefs工具函数" class="headerlink" title="storeToRefs工具函数"></a>storeToRefs工具函数</h3><p>注意，store 是一个用 reactive 包装的对象，这意味着不需要在 getters 后面写 .value。就像 setup 中的 props 一样，我们不能对它进行解构，如我们先前定义的counterStore仓库中的count和doubleCount，如果直接结构，那么再通过页面上的按钮进行加减时，页面将 <strong>不会实时更新</strong>。</p>
<p>我们可以使用<code>storeToRefs</code>函数可以辅助保持数据（state + getter）的响应式解构：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//响应式数据丢失，视图不再更新</span></span><br><span class="line"><span class="keyword">const</span> &#123; count,doubleCount &#125; = counterStore</span><br><span class="line"></span><br><span class="line"><span class="comment">//保持数据响应式</span></span><br><span class="line"><span class="keyword">const</span> &#123; count,doubleCount &#125;  = <span class="title function_">storeToRefs</span>(counterStore)</span><br></pre></td></tr></table></figure></div>

<h3 id="Pinia持久化插件"><a href="#Pinia持久化插件" class="headerlink" title="Pinia持久化插件"></a>Pinia持久化插件</h3><p>官方文档：<a class="link"   href="https://prazdevs.github.io/pinia-plugin-persistedstate/zh/" >https://prazdevs.github.io/pinia-plugin-persistedstate/zh/</a></p>
<p>1.安装插件 pinia-plugin-persistedstate</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i pinia-plugin-persistedstate</span><br></pre></td></tr></table></figure></div>

<p>2.使用main.js</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createPinia &#125; from &#x27;pinia&#x27;</span><br><span class="line">import piniaPluginPersistedstate from &#x27;pinia-plugin-persistedstate&#x27;</span><br><span class="line"></span><br><span class="line">const pinia = createPinia()</span><br><span class="line">pinia.use(piniaPluginPersistedstate)</span><br></pre></td></tr></table></figure></div>

<p>3.配置store&#x2F;counter.js</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; defineStore &#125; from &#x27;pinia&#x27;;</span><br><span class="line">export const useCounterStore = defineStore(&#x27;counter&#x27;,() =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">//数据（state）</span><br><span class="line">const count = ref(10)</span><br><span class="line"></span><br><span class="line">//修改数据的方法（action）</span><br><span class="line">const increament=()=&gt;&#123;count.value++&#125;</span><br><span class="line"></span><br><span class="line">//getters写法</span><br><span class="line">const doubleCount = computed(() =&gt; count.value * 2)</span><br><span class="line"></span><br><span class="line">//记得要retuen</span><br><span class="line">return&#123; count, increament, doubleCount &#125;</span><br><span class="line">	&#125;, &#123;</span><br><span class="line">      persist: true,</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>

<p>4.其他配置，看官网文档即可。</p>
]]></content>
      <categories>
        <category>技术记录</category>
        <category>前端应用</category>
      </categories>
      <tags>
        <tag>Pinia</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo快速搭建自己的博客系统</title>
    <url>/2024/11/18/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="一、Git工具和Node-js的安装"><a href="#一、Git工具和Node-js的安装" class="headerlink" title="一、Git工具和Node.js的安装"></a>一、Git工具和Node.js的安装</h3><h4 id="1-Git工具的安装"><a href="#1-Git工具的安装" class="headerlink" title="1.Git工具的安装"></a>1.Git工具的安装</h4><p>打开<a class="link"   href="https://git-scm.com/" >Git</a>官网，无脑安装下一步即可。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.imgdb.cn/item/673aa748d29ded1a8c30ffae.png"
                      alt="image-20241118102701780"
                ></p>
<p>Git安装成功：任一位置右击鼠标，会出现“Git GUI Here”和“Git Bash Here”，则表示安装成功。</p>
<h4 id="2-Node-js的安装"><a href="#2-Node-js的安装" class="headerlink" title="2.Node.js的安装"></a>2.Node.js的安装</h4><p>打开<a class="link"   href="https://nodejs.org/zh-cn/" >Node.js官网</a>，点击下载，安装无脑下一步</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.imgdb.cn/item/673aa8fed29ded1a8c3224c9.png"
                     
                ></p>
<p>Node.js安装成功：Win+r，输入cmd，回车，输入node -v，回车显示版本号，则表示安装成功。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.imgdb.cn/item/673aa978d29ded1a8c3275d1.png"
                     
                ></p>
<h3 id="二、Hexo安装"><a href="#二、Hexo安装" class="headerlink" title="二、Hexo安装"></a>二、Hexo安装</h3><h4 id="1-Hexo安装步骤"><a href="#1-Hexo安装步骤" class="headerlink" title="1.Hexo安装步骤"></a>1.Hexo安装步骤</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//安装Hexo</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建博客目录</span></span><br><span class="line">mkdir blog</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入博客目录</span></span><br><span class="line">cd blog</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化hexo</span></span><br><span class="line">hexo init blog</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装所需依赖包</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动hexo项目</span></span><br><span class="line">hexo server 或者 hexo s</span><br></pre></td></tr></table></figure></div>

<p>出现<a class="link"   href="http://localhost:4000/" >http://localhost:4000/</a> 则表示安装成功。访问就可以看到默认的hexo博客的页面。</p>
<h3 id="三、编写博客内容"><a href="#三、编写博客内容" class="headerlink" title="三、编写博客内容"></a>三、编写博客内容</h3><ul>
<li>可以安装自己喜欢的<a class="link"   href="https://hexo.io/themes/" >主题</a>，具体看主题文档使用！</li>
<li>博客内容的格式是基于<a class="link"   href="https://markdown.com.cn/" >markdown</a>，需要提前学习一下其语法，比较简单！</li>
</ul>
<p>在命令行输入</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;文章标题&quot;</span><br></pre></td></tr></table></figure></div>

<p>可以看到在目录source下_posts多生成了一个格式为文章标题.md的文件，双击点开，推荐使用<a class="link"   href="https://www.typoraio.cn/" >Typora</a>来写文章，基本结构如下!</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">    <span class="attr">title</span>: 使用<span class="title class_">Hexo</span>搭建自己的博客网站</span><br><span class="line"><span class="attr">date</span>: <span class="number">2021</span>/<span class="number">10</span>/<span class="number">4</span></span><br><span class="line"><span class="attr">tags</span>:</span><br><span class="line">    - <span class="title class_">Hexo</span></span><br><span class="line"><span class="attr">categories</span>:</span><br><span class="line">    - blog</span><br><span class="line">---</span><br><span class="line"><span class="comment">//上面是博文开头，包括标题日期标签分类等等</span></span><br><span class="line"><span class="comment">//下面是内容（markdown语法）</span></span><br><span class="line"></span><br><span class="line">    hello world!</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清除缓存文件和静态文件</span></span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成静态博客文件</span></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动博客</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></div>

<p>刷新<a class="link"   href="http://localhost:4000/" >http://localhost:4000/</a>  查看效果</p>
<h3 id="四、发布博客"><a href="#四、发布博客" class="headerlink" title="四、发布博客"></a>四、发布博客</h3><p>1.创建一个以你的<a class="link"   href="https://github.com/" >GitHub</a>用户名命名的代码仓库，例如xxx.github.io</p>
<p>2.安装deployer插件并配置deploy</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div>

<p>修改配置文件_config.yml配置deploy</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Deployment</span></span><br><span class="line"><span class="comment">// Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy</span>:</span><br><span class="line">    - <span class="attr">type</span>: git</span><br><span class="line"><span class="attr">repository</span>: git@github.<span class="property">com</span>:your_github_id/xxxx.<span class="property">github</span>.<span class="property">io</span>.<span class="property">git</span>   #点开你的仓库查看</span><br><span class="line"><span class="attr">branch</span>: master</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.imgdb.cn/item/673ab387d29ded1a8c3af37d.png"
                     
                ></p>
<p>3.注册Git，配置远程连接</p>
<p>在文件资源管理器中右键 - Open Git Bash here，打开git终端，输入以下两条命令，设置用户名和邮箱：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub邮箱&quot;</span><br></pre></td></tr></table></figure></div>

<p>创建GitHub token</p>
<p>打开自己的 GitHub 主页，点击自己的头像找到 Settings 并进入, 选择 developer settings 在左边目录栏找到 Personal access tokens，点击 Generate new token，按照步骤申请即可，过程比较简单, 这里不详述。</p>
<p>4.在文件资源管理器中右键 - Open Git Bash here，打开git终端，输入以下三条命令发布博客</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></div>

<p>提示输入github用户名密码输入就可以了</p>
<p>5.验证是否发布成功</p>
<p>浏览器打开自己的博客首页<a class="link"   href="https://sicyxa.github.io/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BA%86%EF%BC%81" >https://sicyxa.github.io/就可以看到自己的博客了！</a></p>
<h3 id="五、相关链接"><a href="#五、相关链接" class="headerlink" title="五、相关链接"></a>五、相关链接</h3><p><a class="link"   href="https://hexo.io/docs/" >Hexo 官方文档</a></p>
<p><a class="link"   href="https://hexo.io/zh-cn/docs/configuration" >Hexo 配置文档</a></p>
<p><a class="link"   href="https://hexo.io/themes/" >Hexo 主题</a></p>
<p>​	</p>
]]></content>
      <categories>
        <category>技术记录</category>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>个人第一篇博客</title>
    <url>/2024/11/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul>
<li>这是我的第一篇个人博客，作为初学者，这算是一个新的开始，程序员总该要有一个属于自己的网站吧！</li>
<li>搭建这个blog的目的是想记录一些东西，技术上的也好，日常生活也好，过程中也能学习到不少东西，说干就干！</li>
</ul>
<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>进入程序员这行已经有2年时间了，从技术小白一路走来，学过的知识和做过的项目都不曾好好地去总结，所以想找个地方好好记录下来。</p>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>大学四年时候给我的第一感受是，修完学校的课程后，发现出来工作用得上的少之又少，如今大环境经济形势 不好，跳槽也很难，要想找到满意的工作就不得不提高自己的技术和水平，所以要想深入了解开发技术必须要用业余时间来学习记录和总结。</p>
<h3 id="入行"><a href="#入行" class="headerlink" title="入行"></a>入行</h3><p>毕业后第一件事当然是找工作啦，兜兜转转两个月，找到了一家做农业的物联网公司，正好缺一个应届毕业生做网页开发，于是就开启了搬砖生活。公司规模不大，平时的工作是写写web前端的页面，刚入职不久就去山西出差做项目了，老板可能看我表现还可以，完成了基本考核后正式转正成了一名前端开发。</p>
<h3 id="技术学习"><a href="#技术学习" class="headerlink" title="技术学习"></a>技术学习</h3><p>大学期间主要学的java，js，html，css什么都学一点，所以技术上来说不是很深入，<a class="link"   href="https://cn.vuejs.org/guide/introduction.html" >Vue</a>是近几年比较火的前端框架，为了快点提高技术自己又花时间去网上看文档视频，js，css，html也是重新学习了一下，然后就直接开始实际做项目。刚开始使用技术不够熟练，踩了不少坑，一个自适应页面折腾了好几个月才勉强搞定，现在熟悉了以后看之前写的代码不禁感叹我以前这么菜的啊，哈哈。</p>
<h3 id="业余生活"><a href="#业余生活" class="headerlink" title="业余生活"></a>业余生活</h3><p>工作是双休制不加班，所以平常有事没事就和同学朋友出去玩，爬爬山吃吃饭唱唱歌啥的，总之比较爱玩。可能是大学生活过的太爽了，现在已经成了一个小胖子了（大一那会还是挺瘦的），之前膝盖受过伤，爬山又开始有点膝盖疼了，腿脚也不利索了也就爬的少了。本来我也是个不追星的人，谁知道突然杀出来个赵雷，他的歌给人一种朴实且真诚的感觉，后面就越来越喜欢了，偶尔会去看看他音乐节。今年错过了“没有信号”巡演和阿那亚限时返场，真是遗憾。其他的话偶尔追追剧、看看电影、学学吉他。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>尽量每周写一篇记录一下生活、技术的博客，总结一下经验。明年想离开桂林去外边的世界看看，得多提升一下自己才行！</p>
]]></content>
      <categories>
        <category>记录生活</category>
        <category>第一篇博客</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>新的开始</tag>
      </tags>
  </entry>
</search>
