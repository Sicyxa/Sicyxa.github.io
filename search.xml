<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ES6常用语法</title>
    <url>/2024/11/23/ES6%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h3 id="ES6是什么"><a href="#ES6是什么" class="headerlink" title="ES6是什么"></a>ES6是什么</h3><p>ECMAScript 6.0（也可以称为ECMAScript2015），ECMAScript 6.0简称 ES6，是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p>
<h3 id="1、块级作用域（let、const）"><a href="#1、块级作用域（let、const）" class="headerlink" title="1、块级作用域（let、const）"></a>1、块级作用域（let、const）</h3><ul>
<li>块级作用域，就是其使用范围只有在{}中起作用，不像之前var定义的变量都是函数级作用域。</li>
<li><font color="red">let</font> 和 <font color="red">const</font>不允许重复声明变量</li>
<li><font color="red">let</font> 和 <font color="red">const</font> 声明的变量不会在预解析的时候解析（没有变量提升，需要先声明再使用）</li>
<li><font color="red">let</font> 声明的变量的值可以改变，<font color="red">const</font>声明的变量值不可以改变，且声明的时候必须赋值。</li>
</ul>
<h3 id="2、解构赋值"><a href="#2、解构赋值" class="headerlink" title="2、解构赋值"></a>2、解构赋值</h3><p>从数组和对象中提取值，对变量进行赋值</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组解构</span></span><br><span class="line"><span class="keyword">const</span> [a,b,c]=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c)   <span class="comment">//1,2,3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对象解构</span></span><br><span class="line"><span class="comment">//对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</span></span><br><span class="line"><span class="keyword">let</span> &#123;age,name&#125; = &#123;<span class="attr">name</span>:<span class="string">&quot;chenyuxiang&quot;</span>,<span class="attr">age</span>:<span class="number">24</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age,name)   <span class="comment">//chenyuxiang,24</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串解构</span></span><br><span class="line"><span class="keyword">const</span> [a,b,c,d] = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c)   <span class="comment">//h,e,l</span></span><br></pre></td></tr></table></figure></div>
<h3 id="3、模板字符串"><a href="#3、模板字符串" class="headerlink" title="3、模板字符串"></a>3、模板字符串</h3><p>反引号(&#96;&#96;)，变量(${})</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> msg = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">`你好，<span class="subst">$&#123;msg&#125;</span>`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)   <span class="comment">//输出结果为：你好，hello world</span></span><br></pre></td></tr></table></figure></div>
<h4 id="3-1、-字符串扩展-includes函数"><a href="#3-1、-字符串扩展-includes函数" class="headerlink" title="3.1、 字符串扩展- includes函数"></a>3.1、 字符串扩展- includes函数</h4><p>判断字符串中是否存在指定字符,返回布尔值，存在则为true，不存在则为false</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;chenyuxiang&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="title function_">includes</span>(<span class="string">&quot;c&quot;</span>))  <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="title function_">includes</span>(<span class="string">&quot;d&quot;</span>))  <span class="comment">//false</span></span><br></pre></td></tr></table></figure></div>

<h4 id="3-2-、字符串扩展-repeat函数"><a href="#3-2-、字符串扩展-repeat函数" class="headerlink" title="3.2 、字符串扩展- repeat函数"></a>3.2 、字符串扩展- repeat函数</h4><p>repeat()函数返回一个新的字符串，表示将原字符串重复n次</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;x&#x27;</span></span><br><span class="line"></span><br><span class="line">str.<span class="title function_">repeat</span>(<span class="number">3</span>)   <span class="comment">// &#x27;xxx&#x27;</span></span><br><span class="line">str.<span class="title function_">repeat</span>(<span class="number">0</span>)  <span class="comment">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="4、数组扩展"><a href="#4、数组扩展" class="headerlink" title="4、数组扩展"></a>4、数组扩展</h3><h4 id="4-1、扩展运算符，数组合并"><a href="#4-1、扩展运算符，数组合并" class="headerlink" title="4.1、扩展运算符，数组合并"></a>4.1、扩展运算符，数组合并</h4><p>扩展运算符（spread）是三个点（<code>...</code>）。将一个数组转为用都好分隔的参数序列</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])   <span class="comment">//1 2 3</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>,...[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">5</span>)  <span class="comment">//1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(...[<span class="number">14</span>,<span class="number">3</span>,<span class="number">77</span>])</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">14</span>,<span class="number">3</span>,<span class="number">77</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr1 =[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> arr2 =[<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="comment">//合并数组</span></span><br><span class="line">[...arr1,...arr2]  <span class="comment">//[&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure></div>

<h4 id="4-2-、Array-of"><a href="#4-2-、Array-of" class="headerlink" title="4.2 、Array.of"></a>4.2 、Array.of</h4><p>将一组值转化为数组，即新建数组</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr =<span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)  <span class="comment">// [1,2,3]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="4-3、-find方法"><a href="#4-3、-find方法" class="headerlink" title="4.3、 find方法"></a>4.3、 find方法</h4><p>（1）该方法主要应用于查找<font color="red">第一个</font>符合条件的数组元素<br>（2）它的参数是一个回调函数。在回调函数中可以写你要查找元素的条件,当条件成立为true时,返回该元素。如果没有符合条件的元素,返回值为undefined</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = arr.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;<span class="keyword">return</span> item&gt;<span class="number">13</span>&#125;)               <span class="comment">//值  输出14</span></span><br><span class="line"><span class="keyword">let</span> res1 = arr.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;retuen item&gt;<span class="number">13</span>&#125;)         <span class="comment">//索引 输出3</span></span><br></pre></td></tr></table></figure></div>

<h3 id="5、对象扩展-Object-assign"><a href="#5、对象扩展-Object-assign" class="headerlink" title="5、对象扩展 Object.assign"></a>5、对象扩展 Object.assign</h3><p><code>Object.assign()</code>方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target =  &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Object.assign()方法的第一个参数是目标对象，后面的参数都是源对象。</span></span><br><span class="line"><span class="comment">//注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。</span></span><br><span class="line"><span class="keyword">const</span> arr = <span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target); <span class="comment">//  &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//&#123; a: 1, b: 4, c: 5 &#125;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="6、Set"><a href="#6、Set" class="headerlink" title="6、Set"></a>6、Set</h3><p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">2</span>].<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> s.<span class="title function_">add</span>(item))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> s)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)        <span class="comment">//2 3 5 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通过 add() 方法向 Set 结构加入成员，结果表明 Set 结构不会添加重复的,Set 函数可以接受一个数组作为参数</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>])  </span><br><span class="line">..<span class="property">set</span>      <span class="comment">//1 2 3 4</span></span><br><span class="line">[...set]   <span class="comment">//[1,2,3,4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组去重的方法</span></span><br><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>])]     <span class="comment">// [1,2,3,4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串去重</span></span><br><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(<span class="string">&#x27;ababbc&#x27;</span>)].<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)   <span class="comment">// &quot;abc&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>向Set加入值的时候，不会发生类型转换，<font color=red>5</font>&gt;和<font color=red>“5”</font>是两个不同的值</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="string">&quot;5&quot;</span>)</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="number">5</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet) <span class="comment">//Set(2)&#123;&#x27;5&#x27;,5&#125;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="6-1、-size属性"><a href="#6-1、-size属性" class="headerlink" title="6.1、 size属性"></a>6.1、 size属性</h4><p>返回 Set 实例的成员总数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">const item = new Set ([1,2,3,4,5,5,5,5])</span><br><span class="line">item.size    //5</span><br></pre></td></tr></table></figure></div>

<h4 id="6-2、-delete"><a href="#6-2、-delete" class="headerlink" title="6.2、 delete()"></a>6.2、 delete()</h4><p>删除某个值，返回一个布尔值，表示删除是否</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="string">&quot;5&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> flag = mySet.<span class="title function_">delete</span>(<span class="string">&quot;5&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div>

<h4 id="6-3-、has"><a href="#6-3-、has" class="headerlink" title="6.3 、has()"></a>6.3 、has()</h4><p>返回一个布尔值，表示该值是否为Set的成员</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="string">&quot;5&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> flag = mySet.<span class="title function_">has</span>(<span class="string">&quot;5&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div>

<h4 id="6-4、-clear"><a href="#6-4、-clear" class="headerlink" title="6.4、 clear()"></a>6.4、 clear()</h4><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="string">&quot;5&quot;</span>)</span><br><span class="line">mySet.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet);  <span class="comment">// Set(0) &#123;size: 0&#125;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="7、箭头函数"><a href="#7、箭头函数" class="headerlink" title="7、箭头函数"></a>7、箭头函数</h3><p>箭头函数作为普通函数的一个补充，将this指向了函数体之外最近一层的this，而不是向普通JS一样将this指向window变量。</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;cyx&quot;</span></span><br><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;chenyuxiang&quot;</span>,</span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); <span class="comment">// chenyuxiang</span></span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">user.<span class="title function_">getName</span>()</span><br></pre></td></tr></table></figure></div>


  <div class="note-large blue">
    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">
      <p>提示</p>

    </div>
    <div class="notel-content">
      <p>箭头函数里面根本没有自己的 this ，而是引用外层的 this。对于普通函数来说，内部的 this 指向函数运行时所在的对象，但是这 一点对箭头函数不成立。它没有自己的 this 对象，内部的 this 就是定 义时上层作用域中的 this</p>

    </div>
  </div>

<h3 id="8、最后其他es6常用的语法"><a href="#8、最后其他es6常用的语法" class="headerlink" title="8、最后其他es6常用的语法"></a>8、最后其他es6常用的语法</h3><p><a class="link"   href="https://es6.ruanyifeng.com/#docs/promise" >promise对象 (JavaScript进阶之Ajax的问题和什么是promise)</a>)</p>
<p><a class="link"   href="https://es6.ruanyifeng.com/#docs/async" >asyn 和 await 函数 (fetch和axios接口调用方式的用法)</a>)</p>
<p><a class="link"   href="https://es6.ruanyifeng.com/#docs/array" >Es6简化操作的一些数组方法使用及原理</a></p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>前端应用</category>
      </categories>
      <tags>
        <tag>ES6</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Router的基本用法</title>
    <url>/2025/03/05/Router%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h3 id="Vue-Router的基本用法"><a href="#Vue-Router的基本用法" class="headerlink" title="Vue Router的基本用法"></a>Vue Router的基本用法</h3><h4 id="一、安装使用步骤"><a href="#一、安装使用步骤" class="headerlink" title="一、安装使用步骤"></a>一、安装使用步骤</h4><p>对于一个现有的使用 JavaScript 包管理器的项目，你可以从 npm registry 中安装 Vue Router：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-router@4</span><br></pre></td></tr></table></figure></div>

<p>新建文件src&#x2F;router&#x2F;index.js</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createWebHistory, createRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置路由映射：组件和路径映射关系的routes数组</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; </span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./HomeView.vue&#x27;</span>)</span><br><span class="line">  &#125;, </span><br><span class="line">  &#123; </span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./AboutView.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过createRouter创建路由对象，并且传入routes和history模式</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  routes,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//向外共享路由实例对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></div>

<p>在 src&#x2F;main.js 中导入注册 Vue Router</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> ‘./router’</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br></pre></td></tr></table></figure></div>

<p>在App.vue中使用</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- App根组件 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;!-- 声明路由链接 --&gt;</span><br><span class="line">    &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/about&quot;&gt;关于&lt;/router-link&gt;</span><br><span class="line">    &lt;!-- 声明路由占位符 --&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="二、动态路由匹配"><a href="#二、动态路由匹配" class="headerlink" title="二、动态路由匹配"></a>二、<a class="link"   href="https://router.vuejs.org/zh/guide/essentials/dynamic-matching.html" >动态路由匹配</a></h4><p>很多时候，我们需要将给定匹配模式的路由映射到同一个组件。</p>
<ul>
<li><p>例如，我们可能有一个 <code>User</code> 组件，它应该对所有用户进行渲染，但用户 ID 不同。</p>
</li>
<li><p>在Vue Router中，我们可以在路径中使用一个动态字段来实现，我们称之为 路径参数；</p>
</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; </span><br><span class="line">  	  <span class="comment">// 动态字段以冒号开始	</span></span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./User.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>



<p>你可以在同一个路由中设置有多个 <em>路径参数</em>，它们会映射到 <code>$route.params</code> 上的相应字段。例如：</p>
<table>
<thead>
<tr>
<th align="left">匹配模式</th>
<th align="left">匹配路径</th>
<th align="left">route.params</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&#x2F;users&#x2F;:username</td>
<td align="left">&#x2F;users&#x2F;eduardo</td>
<td align="left"><code>&#123; username: &#39;eduardo&#39; &#125;</code></td>
</tr>
<tr>
<td align="left">&#x2F;users&#x2F;:username&#x2F;posts&#x2F;:postId</td>
<td align="left">&#x2F;users&#x2F;eduardo&#x2F;posts&#x2F;123</td>
<td align="left"><code>&#123; username: &#39;eduardo&#39;, postId: &#39;123&#39; &#125;</code></td>
</tr>
</tbody></table>
<h6 id="获取动态路由的值："><a href="#获取动态路由的值：" class="headerlink" title="获取动态路由的值："></a>获取动态路由的值：</h6><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h3&gt;User---&#123;&#123; $route.params.id &#125;&#125;&lt;/h3&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    // setup中使用useRoute</span><br><span class="line">	import &#123;useRoute&#125; from &quot;vue-router&quot;</span><br><span class="line">    const router = useRoute()</span><br><span class="line">    console.log(route.params.id)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h4 id="三、路由命名"><a href="#三、路由命名" class="headerlink" title="三、路由命名"></a>三、路由命名</h4><p>当创建一个路由时，我们可以选择给路由一个 <code>name</code>：</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/user/:username&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;profile&#x27;</span>, </span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">User</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>

<p>然后我们可以使用 <code>name</code> 而不是 <code>path</code> 来传递 <code>to</code> 属性给 <code>&lt;router-link&gt;</code>：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link :to=&quot;&#123; name: &#x27;profile&#x27;, params: &#123; username: &#x27;erina&#x27; &#125; &#125;&quot;&gt;</span><br><span class="line">  User profile</span><br><span class="line">&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></div>

<p>上述示例将创建一个指向 <code>/user/erina</code> 的链接。</p>
<h4 id="四、编程式导航"><a href="#四、编程式导航" class="headerlink" title="四、编程式导航"></a>四、编程式导航</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">    // setup中使用useRoute</span><br><span class="line">	import &#123;useRoute&#125; from &quot;vue-router&quot;</span><br><span class="line">    const router = useRoute()</span><br><span class="line">   	</span><br><span class="line">    //字符串路径</span><br><span class="line">    router.push(&#x27;/user/eduardo&#x27;)</span><br><span class="line">    </span><br><span class="line">    //带路径的对象</span><br><span class="line">    router.push(&#123;path:&#x27;/users/eduardo&#x27;&#125;)</span><br><span class="line">    </span><br><span class="line">    //命名的路由，并加上参数，让路由建立url</span><br><span class="line">    router.push(&#123;name:&#x27;user&#x27;,params:&#123;username:&#x27;eduardo&#x27;&#125;&#125;)</span><br><span class="line">    </span><br><span class="line">    //带查询参数，结果是 /register?plan=private</span><br><span class="line">    router.push(&#123;path:&#x27;/register&#x27;,query:&#123;plan:&#x27;private&#x27;&#125;&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<p><strong>注意</strong>：如果提供了 <code>path</code>，<code>params</code> 会被忽略</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> username = <span class="string">&#x27;eduardo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们可以手动建立 url，但我们必须自己处理编码</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">`/user/<span class="subst">$&#123;username&#125;</span>`</span>) <span class="comment">// -&gt; /user/eduardo</span></span><br><span class="line"><span class="comment">// 同样</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">`/user/<span class="subst">$&#123;username&#125;</span>`</span> &#125;) <span class="comment">// -&gt; /user/eduardo</span></span><br><span class="line"><span class="comment">// 如果可能的话，使用 `name` 和 `params` 从自动 URL 编码中获益</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; username &#125; &#125;) <span class="comment">// -&gt; /user/eduardo</span></span><br><span class="line"><span class="comment">// `params` 不能与 `path` 一起使用</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">params</span>: &#123; username &#125; &#125;) <span class="comment">// -&gt; /user</span></span><br></pre></td></tr></table></figure></div>

<h5 id="替换当前位置"><a href="#替换当前位置" class="headerlink" title="替换当前位置"></a>替换当前位置</h5><p>它的作用类似于 <code>router.push</code>，唯一不同的是，它在导航时不会向 history 添加新记录，正如它的名字所暗示的那样——它取代了当前的条目。也可以直接在传递给 <code>router.push</code> 的 <code>to</code> 参数中增加一个属性 <code>replace: true</code> ：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">replace</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line">router.<span class="title function_">replace</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure></div>

<h5 id="横跨历史"><a href="#横跨历史" class="headerlink" title="横跨历史"></a>横跨历史</h5><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 向前移动一条记录，与 router.forward() 相同</span></span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一条记录，与 router.back() 相同</span></span><br><span class="line">router.<span class="title function_">go</span>(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前进 3 条记录</span></span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有那么多记录，静默失败</span></span><br><span class="line">router.<span class="title function_">go</span>(-<span class="number">100</span>)</span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">100</span>)</span><br></pre></td></tr></table></figure></div>

<h4 id="五、路由组件传参"><a href="#五、路由组件传参" class="headerlink" title="五、路由组件传参"></a>五、路由组件传参</h4><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- User.vue --&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    </span><br><span class="line">defineProps(&#123;</span><br><span class="line">  id: String</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    User &#123;&#123; id &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></div>

<p>然后我们可以通过设置 <code>props: true</code> 来配置路由将 <code>id</code> 参数作为 prop 传递给组件：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/user/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">User</span>, <span class="attr">props</span>: <span class="literal">true</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>技术笔记</category>
        <category>前端应用</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Router</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3中Pinia的基本使用</title>
    <url>/2024/11/19/Vue3%E4%B8%AD%E4%BD%BF%E7%94%A8Pinia%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="Pinia-介绍"><a href="#Pinia-介绍" class="headerlink" title="Pinia 介绍"></a><a class="link"   href="https://pinia.web3doc.top/" >Pinia</a> 介绍</h3><p>Pinia是一个专门为Vue.js设计的状态管理库，它提供了一种简单和直观的方式来管理应用程序的状态。在使用Pinia时，可以轻松地创建定义状态的存储，然后将其与Vue组件绑定，使它们能够使用该状态。和Vuex相比，Pinia 更加简单易用，体积更小，同时具有更好的 TypeScript 支持和插件系统。</p>
<h3 id="安装和配置Pinia"><a href="#安装和配置Pinia" class="headerlink" title="安装和配置Pinia"></a>安装和配置Pinia</h3><p>安装和配置Pinia非常简单，像其他Vue插件一样，Pinia需要通过yarn或npm进行安装并且与Vue应用程序进行绑定，可以使用以下命令进行安装：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add pinia</span><br><span class="line">或者</span><br><span class="line">npm install pinia</span><br></pre></td></tr></table></figure></div>

<p>在安装完Pinia包之后，需要在main.js文件中导入createPinia函数并将Pinia插件与Vue应用程序绑定，如下所示：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;            </span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();  <span class="comment">// 创建Pinia实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);   <span class="comment">// 创建根实例</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(pinia);      <span class="comment">// pinia插件的安装配置</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);   <span class="comment">// 视图的挂载</span></span><br></pre></td></tr></table></figure></div>

<p>使用 createPinia() 函数创建并初始化Pinia插件实例，将其与Vue应用程序绑定使用app.use(pinia)。至此，我们就可以使用Pinia来管理Vue应用程序的状态了。</p>
<h3 id="语法糖写法-setup"><a href="#语法糖写法-setup" class="headerlink" title="语法糖写法-setup"></a>语法糖写法-setup</h3><ul>
<li>定义一个store</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>,<span class="function">()=&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//数据（state）</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改数据的方法（action）</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">increament</span>=(<span class="params"></span>)=&gt;&#123;count.<span class="property">value</span>++&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getters写法</span></span><br><span class="line"><span class="keyword">const</span> doubleCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//记得要retuen</span></span><br><span class="line"><span class="keyword">return</span>&#123;</span><br><span class="line">    count,</span><br><span class="line">    increament,</span><br><span class="line">    doubleCount</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div>

<ul>
<li>在Vue组件中使用</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;!-- 这里使用store里的state --&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123;  store.count &#125;&#125;&lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 这里直接使用store里的getters --&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; store.doubleCount() &#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 这里使用store里的actions --&gt;</span><br><span class="line">  &lt;div @click=&quot;store.increament()&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">    </span><br><span class="line">  import &#123;useCounterStore&#125; from &quot;../../store/counter.js&quot;;</span><br><span class="line">  const store = useCounterStore()</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="storeToRefs工具函数"><a href="#storeToRefs工具函数" class="headerlink" title="storeToRefs工具函数"></a>storeToRefs工具函数</h3><p>注意，store 是一个用 reactive 包装的对象，这意味着不需要在 getters 后面写 .value。就像 setup 中的 props 一样，我们不能对它进行解构，如我们先前定义的counterStore仓库中的count和doubleCount，如果直接结构，那么再通过页面上的按钮进行加减时，页面将 <strong>不会实时更新</strong>。</p>
<p>我们可以使用<code>storeToRefs</code>函数可以辅助保持数据（state + getter）的响应式解构：</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//响应式数据丢失，视图不再更新</span></span><br><span class="line"><span class="keyword">const</span> &#123; count,doubleCount &#125; = counterStore</span><br><span class="line"></span><br><span class="line"><span class="comment">//保持数据响应式</span></span><br><span class="line"><span class="keyword">const</span> &#123; count,doubleCount &#125;  = <span class="title function_">storeToRefs</span>(counterStore)</span><br></pre></td></tr></table></figure></div>

<h3 id="Pinia持久化插件"><a href="#Pinia持久化插件" class="headerlink" title="Pinia持久化插件"></a>Pinia持久化插件</h3><p>官方文档：<a class="link"   href="https://prazdevs.github.io/pinia-plugin-persistedstate/zh/" >https://prazdevs.github.io/pinia-plugin-persistedstate/zh/</a></p>
<p>1.安装插件 pinia-plugin-persistedstate</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i pinia-plugin-persistedstate</span><br></pre></td></tr></table></figure></div>

<p>2.使用main.js</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createPinia &#125; from &#x27;pinia&#x27;</span><br><span class="line">import piniaPluginPersistedstate from &#x27;pinia-plugin-persistedstate&#x27;</span><br><span class="line"></span><br><span class="line">const pinia = createPinia()</span><br><span class="line">pinia.use(piniaPluginPersistedstate)</span><br></pre></td></tr></table></figure></div>

<p>3.配置store&#x2F;counter.js</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">import &#123; defineStore &#125; from &#x27;pinia&#x27;;</span><br><span class="line">export const useCounterStore = defineStore(&#x27;counter&#x27;,() =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">//数据（state）</span><br><span class="line">const count = ref(10)</span><br><span class="line"></span><br><span class="line">//修改数据的方法（action）</span><br><span class="line">const increament=()=&gt;&#123;count.value++&#125;</span><br><span class="line"></span><br><span class="line">//getters写法</span><br><span class="line">const doubleCount = computed(() =&gt; count.value * 2)</span><br><span class="line"></span><br><span class="line">//记得要retuen</span><br><span class="line">return&#123; count, increament, doubleCount &#125;</span><br><span class="line">	&#125;, &#123;</span><br><span class="line">      persist: true,</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>

<p>4.其他配置，看官网文档即可。</p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>前端应用</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>Pinia</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo快速搭建自己的博客系统</title>
    <url>/2024/11/18/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="一、Git工具和Node-js的安装"><a href="#一、Git工具和Node-js的安装" class="headerlink" title="一、Git工具和Node.js的安装"></a>一、Git工具和Node.js的安装</h3><h4 id="1-Git工具的安装"><a href="#1-Git工具的安装" class="headerlink" title="1.Git工具的安装"></a>1.Git工具的安装</h4><p>打开<a class="link"   href="https://git-scm.com/" >Git</a>官网，无脑安装下一步即可。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.imgdb.cn/item/673aa748d29ded1a8c30ffae.png"
                      alt="image-20241118102701780"
                ></p>
<p>Git安装成功：任一位置右击鼠标，会出现“Git GUI Here”和“Git Bash Here”，则表示安装成功。</p>
<h4 id="2-Node-js的安装"><a href="#2-Node-js的安装" class="headerlink" title="2.Node.js的安装"></a>2.Node.js的安装</h4><p>打开<a class="link"   href="https://nodejs.org/zh-cn/" >Node.js官网</a>，点击下载，安装无脑下一步</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.imgdb.cn/item/673aa8fed29ded1a8c3224c9.png"
                     
                ></p>
<p>Node.js安装成功：Win+r，输入cmd，回车，输入node -v，回车显示版本号，则表示安装成功。</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.imgdb.cn/item/673aa978d29ded1a8c3275d1.png"
                     
                ></p>
<h3 id="二、Hexo安装"><a href="#二、Hexo安装" class="headerlink" title="二、Hexo安装"></a>二、Hexo安装</h3><h4 id="1-Hexo安装步骤"><a href="#1-Hexo安装步骤" class="headerlink" title="1.Hexo安装步骤"></a>1.Hexo安装步骤</h4><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//安装Hexo</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建博客目录</span></span><br><span class="line">mkdir blog</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入博客目录</span></span><br><span class="line">cd blog</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化hexo</span></span><br><span class="line">hexo init blog</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装所需依赖包</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动hexo项目</span></span><br><span class="line">hexo server 或者 hexo s</span><br></pre></td></tr></table></figure></div>

<p>出现<a class="link"   href="http://localhost:4000/" >http://localhost:4000/</a> 则表示安装成功。访问就可以看到默认的hexo博客的页面。</p>
<h3 id="三、编写博客内容"><a href="#三、编写博客内容" class="headerlink" title="三、编写博客内容"></a>三、编写博客内容</h3><ul>
<li>可以安装自己喜欢的<a class="link"   href="https://hexo.io/themes/" >主题</a>，具体看主题文档使用！</li>
<li>博客内容的格式是基于<a class="link"   href="https://markdown.com.cn/" >markdown</a>，需要提前学习一下其语法，比较简单！</li>
</ul>
<p>在命令行输入</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;文章标题&quot;</span><br></pre></td></tr></table></figure></div>

<p>可以看到在目录source下_posts多生成了一个格式为文章标题.md的文件，双击点开，推荐使用<a class="link"   href="https://www.typoraio.cn/" >Typora</a>来写文章，基本结构如下!</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">    <span class="attr">title</span>: 使用<span class="title class_">Hexo</span>搭建自己的博客网站</span><br><span class="line"><span class="attr">date</span>: <span class="number">2021</span>/<span class="number">10</span>/<span class="number">4</span></span><br><span class="line"><span class="attr">tags</span>:</span><br><span class="line">    - <span class="title class_">Hexo</span></span><br><span class="line"><span class="attr">categories</span>:</span><br><span class="line">    - blog</span><br><span class="line">---</span><br><span class="line"><span class="comment">//上面是博文开头，包括标题日期标签分类等等</span></span><br><span class="line"><span class="comment">//下面是内容（markdown语法）</span></span><br><span class="line"></span><br><span class="line">    hello world!</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清除缓存文件和静态文件</span></span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成静态博客文件</span></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动博客</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></div>

<p>刷新<a class="link"   href="http://localhost:4000/" >http://localhost:4000/</a>  查看效果</p>
<h3 id="四、发布博客"><a href="#四、发布博客" class="headerlink" title="四、发布博客"></a>四、发布博客</h3><p>1.创建一个以你的<a class="link"   href="https://github.com/" >GitHub</a>用户名命名的代码仓库，例如xxx.github.io</p>
<p>2.安装deployer插件并配置deploy</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div>

<p>修改配置文件_config.yml配置deploy</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Deployment</span></span><br><span class="line"><span class="comment">// Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy</span>:</span><br><span class="line">    - <span class="attr">type</span>: git</span><br><span class="line"><span class="attr">repository</span>: git@github.<span class="property">com</span>:your_github_id/xxxx.<span class="property">github</span>.<span class="property">io</span>.<span class="property">git</span>   #点开你的仓库查看</span><br><span class="line"><span class="attr">branch</span>: master</span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.imgdb.cn/item/673ab387d29ded1a8c3af37d.png"
                     
                ></p>
<p>3.注册Git，配置远程连接</p>
<p>在文件资源管理器中右键 - Open Git Bash here，打开git终端，输入以下两条命令，设置用户名和邮箱：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub邮箱&quot;</span><br></pre></td></tr></table></figure></div>

<p>创建GitHub token</p>
<p>打开自己的 GitHub 主页，点击自己的头像找到 Settings 并进入, 选择 developer settings 在左边目录栏找到 Personal access tokens，点击 Generate new token，按照步骤申请即可，过程比较简单, 这里不详述。</p>
<p>4.在文件资源管理器中右键 - Open Git Bash here，打开git终端，输入以下三条命令发布博客</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></div>

<p>提示输入github用户名密码输入就可以了</p>
<p>5.验证是否发布成功</p>
<p>浏览器打开自己的博客首页<a class="link"   href="https://sicyxa.github.io/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BA%86%EF%BC%81" >https://sicyxa.github.io/就可以看到自己的博客了！</a></p>
<h3 id="五、相关链接"><a href="#五、相关链接" class="headerlink" title="五、相关链接"></a>五、相关链接</h3><p><a class="link"   href="https://hexo.io/docs/" >Hexo 官方文档</a></p>
<p><a class="link"   href="https://hexo.io/zh-cn/docs/configuration" >Hexo 配置文档</a></p>
<p><a class="link"   href="https://hexo.io/themes/" >Hexo 主题</a></p>
<p>​	</p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云短信验证码登录功能</title>
    <url>/2024/12/20/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9F%AD%E4%BF%A1%E9%AA%8C%E8%AF%81%E7%A0%81%E7%99%BB%E5%BD%95%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><h6 id="1、登录阿里云进入到短信服务：阿里云-短信服务"><a href="#1、登录阿里云进入到短信服务：阿里云-短信服务" class="headerlink" title="1、登录阿里云进入到短信服务：阿里云-短信服务"></a>1、登录阿里云进入到短信服务：<a class="link"   href="https://dysms.console.aliyun.com/overview" >阿里云-短信服务</a></h6><h6 id="2、按照首页提示一次完成相应的资质认证和短信模板审核；"><a href="#2、按照首页提示一次完成相应的资质认证和短信模板审核；" class="headerlink" title="2、按照首页提示一次完成相应的资质认证和短信模板审核；"></a>2、按照首页提示一次完成相应的<strong>资质认证</strong>和<strong>短信模板</strong>审核；</h6><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.imgdb.cn/item/6764e4bcd0e0a243d4e6ca6d.jpg"
                     
                ></p>
<h6 id="3、获取你的accessKeySecret和accessKeyId-获取方法：获取AccessKey-阿里云帮助中心"><a href="#3、获取你的accessKeySecret和accessKeyId-获取方法：获取AccessKey-阿里云帮助中心" class="headerlink" title="3、获取你的accessKeySecret和accessKeyId   获取方法：获取AccessKey-阿里云帮助中心"></a>3、获取你的<strong>accessKeySecret</strong>和<strong>accessKeyId</strong>   获取方法：<a class="link"   href="https://help.aliyun.com/document_detail/268244.html#:~:text=%E5%9C%A8%20RAM%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%8F%B0%20%E7%9A%84%E5%B7%A6%E4%BE%A7%E5%AF%BC%E8%88%AA%E6%A0%8F%EF%BC%8C%E9%80%89%E6%8B%A9%20%E4%BA%BA%E5%91%98%E7%AE%A1%E7%90%86%20%3E%20%E7%94%A8%E6%88%B7%EF%BC%8C%E6%90%9C%E7%B4%A2%E9%9C%80%E8%A6%81%E8%8E%B7%E5%8F%96AccessKey%E7%9A%84%E7%94%A8%E6%88%B7%E3%80%82%20%E5%8D%95%E5%87%BB%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E5%90%8D%E7%A7%B0%EF%BC%8C%E5%9C%A8%E7%94%A8%E6%88%B7%E8%AF%A6%E6%83%85%E9%A1%B5%20%E8%AE%A4%E8%AF%81%E7%AE%A1%E7%90%86,%E5%9C%A8%20%E5%88%9B%E5%BB%BAAccessKey%20%E9%A1%B5%E9%9D%A2%EF%BC%8C%E6%9F%A5%E7%9C%8BAccessKeyId%E5%92%8CAccessKeySecret%E3%80%82%20%E5%8F%AF%E4%BB%A5%E5%8D%95%E5%87%BB%20%E4%B8%8B%E8%BD%BDCSV%E6%96%87%E4%BB%B6%EF%BC%8C%E4%B8%8B%E8%BD%BDAccessKey%E4%BF%A1%E6%81%AF%E6%88%96%E8%80%85%E5%8D%95%E5%87%BB%20%E5%A4%8D%E5%88%B6%EF%BC%8C%E5%A4%8D%E5%88%B6AccessKey%E4%BF%A1%E6%81%AF%E3%80%82%20%E6%82%A8%E5%8F%AF%E4%BB%A5%E4%B8%BA%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%BB%E8%B4%A6%E5%8F%B7%E5%92%8C%E5%AD%90%E8%B4%A6%E5%8F%B7%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%AE%BF%E9%97%AE%E5%AF%86%E9%92%A5%EF%BC%88AccessKey%EF%BC%89%E3%80%82%20%E5%9C%A8%E8%B0%83%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91API%E6%97%B6%E6%82%A8%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8AccessKey%E5%AE%8C%E6%88%90%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E3%80%82" >获取AccessKey-阿里云帮助中心</a></h6><h6 id="4、获取SignName（签名名称）和TemolateCode（模板code）"><a href="#4、获取SignName（签名名称）和TemolateCode（模板code）" class="headerlink" title="4、获取SignName（签名名称）和TemolateCode（模板code）"></a>4、获取<strong>SignName（签名名称）</strong>和<strong>TemolateCode（模板code）</strong></h6><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.imgdb.cn/item/6764e698d0e0a243d4e6cb1c.jpg"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.imgdb.cn/item/6764e757d0e0a243d4e6cb4e.jpg"
                     
                ></p>
<h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic.imgdb.cn/item/6764e900d0e0a243d4e6cb99.jpg"
                     
                ></p>
<h6 id="1、首先创建一个node的工程文件夹，我这里是aliyun，然后初始化，如下命令，然后按上图目录创建好对应文件"><a href="#1、首先创建一个node的工程文件夹，我这里是aliyun，然后初始化，如下命令，然后按上图目录创建好对应文件" class="headerlink" title="1、首先创建一个node的工程文件夹，我这里是aliyun，然后初始化，如下命令，然后按上图目录创建好对应文件"></a>1、首先创建一个node的工程文件夹，我这里是aliyun，然后初始化，如下命令，然后按上图目录创建好对应文件</h6><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure></div>

<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><h6 id="1、在项目的根目录，打开终端，输入如下命令"><a href="#1、在项目的根目录，打开终端，输入如下命令" class="headerlink" title="1、在项目的根目录，打开终端，输入如下命令"></a>1、在项目的根目录，打开终端，输入如下命令</h6><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm  i body-parser express knex moment mysql @alicloud/sms-sdk --save</span><br></pre></td></tr></table></figure></div>

<h3 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h3><h6 id="1、修改配置文件-config-index-js"><a href="#1、修改配置文件-config-index-js" class="headerlink" title="1、修改配置文件 &#x2F;config &#x2F;index.js"></a>1、修改配置文件 &#x2F;config &#x2F;index.js</h6><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// AccessKey ID</span></span><br><span class="line">    <span class="attr">accessKeyId</span>: <span class="string">&quot;XXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</span>,</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// AccessKey Secret</span></span><br><span class="line">    <span class="attr">secretAccessKey</span>: <span class="string">&quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</span>,</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 签名名称</span></span><br><span class="line">    <span class="attr">signName</span>: <span class="string">&quot;XXXX&quot;</span>,</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 模板CODE =&gt; 登录/注册 - 验证码</span></span><br><span class="line">    <span class="attr">templateCode_login</span>: <span class="string">&quot;SMS_4XXXXXXXX&quot;</span>,</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = config</span><br></pre></td></tr></table></figure></div>

<h6 id="2、修改数据库文件-config-db-js"><a href="#2、修改数据库文件-config-db-js" class="headerlink" title="2、修改数据库文件 &#x2F;config&#x2F;db.js"></a>2、修改数据库文件 &#x2F;config&#x2F;db.js</h6><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> knex = <span class="built_in">require</span>(<span class="string">&#x27;knex&#x27;</span>)(&#123;</span><br><span class="line">    <span class="attr">client</span>:<span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">    <span class="attr">connection</span>:&#123;</span><br><span class="line">      <span class="attr">host</span>:<span class="string">&#x27;192.168.1.19&#x27;</span>,</span><br><span class="line">      <span class="attr">user</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>:<span class="string">&#x27;Xaocao2120801&#x27;</span>,         </span><br><span class="line">      <span class="attr">database</span>:<span class="string">&#x27;aliyun&#x27;</span>                 <span class="comment">//数据库名称</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = knex</span><br></pre></td></tr></table></figure></div>

<h6 id="3、修改主启动文件-server-index-js-（具体登录的业务逻辑根据实际情况进行修改，这里主要是发送验证码和验证功能）"><a href="#3、修改主启动文件-server-index-js-（具体登录的业务逻辑根据实际情况进行修改，这里主要是发送验证码和验证功能）" class="headerlink" title="3、修改主启动文件 &#x2F;server&#x2F;index.js （具体登录的业务逻辑根据实际情况进行修改，这里主要是发送验证码和验证功能）"></a>3、修改主启动文件 &#x2F;server&#x2F;index.js （具体登录的业务逻辑根据实际情况进行修改，这里主要是发送验证码和验证功能）</h6><div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//获取前端数据的插件</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="comment">// 阿里云短信sdk</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">SMSClient</span> = <span class="built_in">require</span>(<span class="string">&#x27;@alicloud/sms-sdk&#x27;</span>);</span><br><span class="line"><span class="comment">// 阿里云短信配置文件</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;../config/index&#x27;</span>);</span><br><span class="line"><span class="comment">// 配置数据库</span></span><br><span class="line"><span class="keyword">const</span> knex = <span class="built_in">require</span>(<span class="string">&#x27;../config/db&#x27;</span>)</span><br><span class="line"><span class="comment">// 用于处理日期时间相关操作，方便计算和比较时间</span></span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&#x27;moment&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">//端口号</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>())</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">//解决跨域问题</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>); <span class="comment">// 生产环境中限制来源</span></span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type&#x27;</span>); <span class="comment">// 注意Content-Type的大小写</span></span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;PUT,POST,GET,DELETE,OPTIONS,PATCH&quot;</span>);</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Max-Age&#x27;</span>, <span class="number">1728000</span>); <span class="comment">// 预请求缓存20天</span></span><br><span class="line">     <span class="comment">// 对于OPTIONS请求，直接返回响应</span></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">        res.<span class="title function_">sendStatus</span>(<span class="number">200</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送短信验证码的API接口</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/sendSmsCode&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;phone&#125; = req.<span class="property">body</span>; <span class="comment">// 从请求体中获取手机号</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 查询手机号是否存在</span></span><br><span class="line">        <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title function_">knex</span>(<span class="string">&#x27;users&#x27;</span>).<span class="title function_">where</span>(&#123;phone&#125;).<span class="title function_">first</span>()</span><br><span class="line">        <span class="keyword">if</span> (!user) &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">400</span>).<span class="title function_">json</span>(&#123;<span class="attr">code</span>: <span class="number">400</span>, <span class="attr">message</span>: <span class="string">&#x27;该用户不存在，请联系管理员&#x27;</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 参数配置 sms_client</span></span><br><span class="line">        <span class="keyword">const</span> accessKeyId = config.<span class="property">accessKeyId</span>;</span><br><span class="line">        <span class="keyword">const</span> secretAccessKey = config.<span class="property">secretAccessKey</span>;</span><br><span class="line">        <span class="keyword">const</span> signName = config.<span class="property">signName</span>;</span><br><span class="line">        <span class="keyword">const</span> templateCode = config.<span class="property">templateCode_login</span>;</span><br><span class="line">        <span class="comment">// 随机六位验证码</span></span><br><span class="line">        <span class="keyword">const</span> verify = <span class="title class_">Math</span>.<span class="title function_">random</span>().<span class="title function_">toString</span>().<span class="title function_">slice</span>(-<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">const</span> phoneNum = phone;</span><br><span class="line">        <span class="comment">// 初始化 sms_client</span></span><br><span class="line">        <span class="keyword">const</span> smsClient = <span class="keyword">new</span> <span class="title class_">SMSClient</span>(&#123;accessKeyId, secretAccessKey&#125;);</span><br><span class="line">        <span class="comment">// 发送短信</span></span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> smsClient.<span class="title function_">sendSMS</span>(&#123;</span><br><span class="line">            <span class="comment">// 发送对象手机号</span></span><br><span class="line">            <span class="title class_">PhoneNumbers</span>: phoneNum,</span><br><span class="line">            <span class="comment">// 签名名称</span></span><br><span class="line">            <span class="title class_">SignName</span>: signName,</span><br><span class="line">            <span class="comment">// 模版CODE</span></span><br><span class="line">            <span class="title class_">TemplateCode</span>: templateCode,</span><br><span class="line">            <span class="comment">// 短信模板变量对应的实际值，JSON格式</span></span><br><span class="line">            <span class="title class_">TemplateParam</span>: <span class="string">`&#123;&quot;code&quot;:&quot;<span class="subst">$&#123;verify&#125;</span>&quot;&#125;`</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 判断是否发送成功</span></span><br><span class="line">        <span class="keyword">if</span> (result.<span class="property">Code</span> === <span class="string">&#x27;OK&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">knex</span>(<span class="string">&#x27;ver_codes&#x27;</span>).<span class="title function_">insert</span>(&#123;</span><br><span class="line">                phone,</span><br><span class="line">                <span class="attr">code</span>: verify,</span><br><span class="line">                <span class="attr">created_at</span>: <span class="title function_">moment</span>().<span class="title function_">toDate</span>(),</span><br><span class="line">                <span class="attr">expired_at</span>: <span class="title function_">moment</span>().<span class="title function_">add</span>(<span class="number">5</span>,<span class="string">&#x27;minutes&#x27;</span>).<span class="title function_">toDate</span>(),  <span class="comment">//设置有效期（5分钟）</span></span><br><span class="line">                <span class="attr">used</span>: <span class="number">0</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;<span class="attr">message</span>: <span class="string">&#x27;短信发送成功&#x27;</span>, <span class="attr">code</span>: verify&#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123;<span class="attr">error</span>: <span class="string">&#x27;短信发送失败&#x27;</span>, <span class="attr">message</span>: result.<span class="property">Message</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;发送短信时发生错误&#x27;</span>, <span class="attr">message</span>: error.<span class="property">message</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//登录接口</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>,<span class="title function_">async</span>(req,res)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; phone, code &#125; = req.<span class="property">body</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//查询数据库中该手机号对应的验证码记录</span></span><br><span class="line">        <span class="keyword">const</span> verRecord = <span class="keyword">await</span> <span class="title function_">knex</span>(<span class="string">&#x27;ver_codes&#x27;</span>)</span><br><span class="line">            .<span class="title function_">where</span>(&#123;phone,<span class="attr">used</span>:<span class="number">0</span>&#125;)</span><br><span class="line">            .<span class="title function_">andWhere</span>(<span class="string">&#x27;expired_at&#x27;</span>,<span class="string">&#x27;&gt;&#x27;</span>,<span class="title function_">moment</span>().<span class="title function_">toDate</span>())</span><br><span class="line">            .<span class="title function_">first</span>()</span><br><span class="line">         <span class="keyword">if</span>(!verRecord)&#123;</span><br><span class="line">            <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123;<span class="attr">error</span>:<span class="string">&#x27;验证码无效，请重新获取&#x27;</span>,<span class="attr">message</span>:<span class="string">&#x27;验证码已过期或不存在&#x27;</span>&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">if</span>(phone === verRecord.<span class="property">phone</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(verRecord.<span class="property">code</span> === code)&#123;</span><br><span class="line">                <span class="comment">//验证码正确，更行该记录的used字段为1，表示已使用</span></span><br><span class="line">                <span class="keyword">await</span> <span class="title function_">knex</span>(<span class="string">&#x27;ver_codes&#x27;</span>).<span class="title function_">where</span>(&#123;<span class="attr">id</span>:verRecord.<span class="property">id</span>&#125;).<span class="title function_">update</span>(&#123;<span class="attr">used</span>:<span class="number">1</span>&#125;)</span><br><span class="line">                <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;<span class="attr">code</span>:<span class="number">200</span>,<span class="attr">message</span>:<span class="string">&#x27;验证通过&#x27;</span>&#125;)</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span>  res.<span class="title function_">status</span>(<span class="number">401</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;验证码错误，请重新输入&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;输入的验证码与发送的不一致&#x27;</span> &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (error)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">status</span>(<span class="number">500</span>).<span class="title function_">json</span>(&#123; <span class="attr">error</span>: <span class="string">&#x27;登录验证时发生错误&#x27;</span>, <span class="attr">message</span>: error.<span class="property">message</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务器正在运行在 http://localhost:<span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<h6 id="4、修改前端vue组件-index-vue（需安装axios和element-plus）"><a href="#4、修改前端vue组件-index-vue（需安装axios和element-plus）" class="headerlink" title="4、修改前端vue组件 index.vue（需安装axios和element-plus）"></a>4、修改前端vue组件 index.vue（需安装axios和element-plus）</h6><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123; ElMessage &#125; from &#x27;element-plus&#x27;;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line"></span><br><span class="line">const form = ref(&#123;phone: &#x27;&#x27;, code: &#x27;&#x27;&#125;)</span><br><span class="line">//是否处于发送验证码状态</span><br><span class="line">const messageCodeVis = ref(false)</span><br><span class="line">//倒计时</span><br><span class="line">let countdown = ref(0)</span><br><span class="line"></span><br><span class="line">//发送验证码函数</span><br><span class="line">const sendCode = () =&gt;&#123;</span><br><span class="line">  const reg = /^1[3456789]\d&#123;9&#125;$/;</span><br><span class="line">  if(!form.value.phone) return ElMessage.error(&#x27;请输入手机号码&#x27;)</span><br><span class="line">  if (!reg.test(form.value.phone)) return ElMessage.error(&#x27;请输入有效的手机号码&#x27;);</span><br><span class="line"></span><br><span class="line">  axios.post(&#x27;/sendSmsCode&#x27;,&#123;phone:form.value.phone&#125;).then(res=&gt;&#123;</span><br><span class="line">    if(res.status ===200 &amp;&amp; res.data.message===&#x27;短信发送成功&#x27;)&#123;</span><br><span class="line">        countdown.value = 60</span><br><span class="line">        messageCodeVis.value = true</span><br><span class="line">        startCountdown()</span><br><span class="line">        ElMessage.success(&#x27;验证码发送成功&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).catch(err=&gt;&#123;</span><br><span class="line">    if(err.response.data.code ===400 &amp;&amp; err.response.data.message ===&#x27;该用户不存在，请联系管理员&#x27;)&#123;</span><br><span class="line">        ElMessage.warning(err.response.data.message)</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        ElMessage.error(&#x27;发送验证码时出现网络错误&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* 倒计时 */</span><br><span class="line">const startCountdown = () =&gt; &#123;</span><br><span class="line">    const intervalId = setInterval(() =&gt; &#123;</span><br><span class="line">        if (countdown.value &gt; 0) &#123;</span><br><span class="line">            countdown.value--;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            clearInterval(intervalId)</span><br><span class="line">            messageCodeVis.value = false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 1000)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const submitLogin = async ()=&gt;&#123;</span><br><span class="line">    const phone = form.value.phone;</span><br><span class="line">    const code = form.value.code;</span><br><span class="line">  try &#123;</span><br><span class="line">      const res = await axios.post(&#x27;http://localhost:3000/login&#x27;, &#123;phone,code&#125;)</span><br><span class="line">      if(res.status === 200 &amp;&amp; res.data.message ===&#x27;验证通过&#x27;)&#123;</span><br><span class="line">        ElMessage.success(res.data.message)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;catch (e)&#123;</span><br><span class="line">      if(e.response.data.message===&#x27;验证码已过期或不存在&#x27; &amp;&amp; e.status === 401)&#123;</span><br><span class="line">        ElMessage.error(e.response.data.message)</span><br><span class="line">      &#125;else if(e.response.data.message === &#x27;输入的验证码与发送的不一致&#x27; &amp;&amp; e.status ===401)&#123;</span><br><span class="line">        ElMessage.error(e.response.data.error)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//input输入框规则验证</span><br><span class="line">const rulesForm = &#123;</span><br><span class="line">  phone: [</span><br><span class="line">  &#123; required: true, message: &#x27;请输入手机号码&#x27;, trigger: &#x27;blur&#x27; &#125;,</span><br><span class="line">  &#123; pattern: /^1[3456789]\d&#123;9&#125;$/, message: &#x27;请输入有效的手机号码&#x27;, trigger: &#x27;blur&#x27; &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;el-form :model=&quot;form&quot; :rules=&quot;rulesForm&quot; label-width=&quot;120px&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;el-form-item label=&quot;手机号码：&quot; prop=&quot;phone&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;form.phone&quot; /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line">      &lt;el-form-item label=&quot;验证码：&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;form.code&quot; &gt;</span><br><span class="line">          &lt;template #suffix&gt;</span><br><span class="line">            &lt;div v-if=&quot;messageCodeVis&quot; class=&quot;second-text&quot;&gt;&#123;&#123;countdown&#125;&#125;秒后重新获取&lt;/div&gt;</span><br><span class="line">            &lt;el-button v-else type=&quot;primary&quot; link @click=&quot;sendCode&quot;&gt;获取验证码&lt;/el-button&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/el-input&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">  &lt;el-button type=&quot;primary&quot; @click=&quot;submitLogin&quot;&gt;登录&lt;/el-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.read-the-docs &#123;</span><br><span class="line">  color: #888;</span><br><span class="line">&#125;</span><br><span class="line">.second-text &#123;</span><br><span class="line">  color: #e60707;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h6 id="5、mysql数据库表的创建代码"><a href="#5、mysql数据库表的创建代码" class="headerlink" title="5、mysql数据库表的创建代码"></a>5、mysql数据库表的创建代码</h6><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># users表（用于存储用户基本信息）</span><br><span class="line">CREATE TABLE `users` (</span><br><span class="line">    `id` int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    `phone` varchar(20) NOT NULL UNIQUE,</span><br><span class="line">    `password` varchar(255) DEFAULT NULL,</span><br><span class="line">    `created_at` datetime DEFAULT CURRENT_TIMESTAMP,                     #记录用户创建账号的时间</span><br><span class="line">    `updated_at` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP  #记录账号信息最后更新时间</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># ver_codes表 (用于存储验证码相关信息)</span><br><span class="line">CREATE TABLE `ver_codes` (</span><br><span class="line">    `id` int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">    `phone` varchar(20) NOT NULL,</span><br><span class="line">    `code` varchar(6) NOT NULL,</span><br><span class="line">    `created_at` datetime DEFAULT CURRENT_TIMESTAMP,    #创建时间</span><br><span class="line">    `expired_at` datetime NOT NULL,                     #设置验证码过期时间</span><br><span class="line">    `used` tinyint(1) DEFAULT 0                         #表示验证码是否被使用，默认为0表示未使用</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>技术笔记</category>
        <category>云服务应用</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>个人第一篇博客</title>
    <url>/2024/11/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><ul>
<li>这是我的第一篇个人博客，作为初学者，这算是一个新的开始，程序员总该要有一个属于自己的网站吧！</li>
<li>搭建这个blog的目的是想记录一些东西，技术上的也好，日常生活也好，过程中也能学习到不少东西，说干就干！</li>
</ul>
<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>进入程序员这行已经有2年时间了，从技术小白一路走来，学过的知识和做过的项目都不曾好好地去总结，所以想找个地方好好记录下来。</p>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>大学四年时候给我的第一感受是，修完学校的课程后，发现出来工作用得上的少之又少，如今大环境经济形势 不好，跳槽也很难，要想找到满意的工作就不得不提高自己的技术和水平，所以要想深入了解开发技术必须要用业余时间来学习记录和总结。</p>
<h3 id="入行"><a href="#入行" class="headerlink" title="入行"></a>入行</h3><p>毕业后第一件事当然是找工作啦，兜兜转转两个月，找到了一家做农业的物联网公司，正好缺一个应届毕业生做网页开发，于是就开启了搬砖生活。公司规模不大，平时的工作是写写web前端的页面，刚入职不久就去山西出差做项目了，老板可能看我表现还可以，完成了基本考核后正式转正成了一名前端开发。</p>
<h3 id="技术学习"><a href="#技术学习" class="headerlink" title="技术学习"></a>技术学习</h3><p>大学期间主要学的java，js，html，css什么都学一点，所以技术上来说不是很深入，<a class="link"   href="https://cn.vuejs.org/guide/introduction.html" >Vue</a>是近几年比较火的前端框架，为了快点提高技术自己又花时间去网上看文档视频，js，css，html也是重新学习了一下，然后就直接开始实际做项目。刚开始使用技术不够熟练，踩了不少坑，一个自适应页面折腾了好几个月才勉强搞定，现在熟悉了以后看之前写的代码不禁感叹我以前这么菜的啊，哈哈。</p>
<h3 id="业余生活"><a href="#业余生活" class="headerlink" title="业余生活"></a>业余生活</h3><p>工作是双休制不加班，所以平常有事没事就和同学朋友出去玩，爬爬山吃吃饭唱唱歌啥的，总之比较爱玩。可能是大学生活过的太爽了，现在已经成了一个小胖子了（大一那会还是挺瘦的），之前膝盖受过伤，爬山又开始有点膝盖疼了，腿脚也不利索了也就爬的少了。本来我也是个不追星的人，谁知道突然杀出来个赵雷，他的歌给人一种朴实且真诚的感觉，后面就越来越喜欢了，偶尔会去看看他音乐节。今年错过了“没有信号”巡演和阿那亚限时返场，真是遗憾。其他的话偶尔追追剧、看看电影、学学吉他。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>尽量每周写一篇记录一下生活、技术的博客，总结一下经验。明年想离开桂林去外边的世界看看，得多提升一下自己才行！</p>
]]></content>
      <categories>
        <category>记录生活</category>
        <category>第一篇博客</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>新的开始</tag>
      </tags>
  </entry>
</search>
